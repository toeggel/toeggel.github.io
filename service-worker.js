var dataCache = "dataCache-1  ";
var appShellCache = "appShellCache-3";
var custom404 = new Request("/404.html");
var routesToRedirects = [];
var filesToCache = [
    custom404,
    new Request("/"),
    new Request("/app.min.js"),
    new Request("/app/app.component.html "),
    new Request("/app/home.component.html "),
    new Request("/assets/css/main.css"),
    new Request("/vendor/core-js/client/shim.min.js"),
    new Request("/vendor/zone.js/dist/zone.js"),
    new Request("/vendor/reflect-metadata/Reflect.js"),
    new Request("/vendor/systemjs/dist/system.src.js"),
    new Request("/systemjs.config.js"),
];
// If a byte changes -> new service worker will be installed
self.addEventListener("install", function (e) {
    console.log("[ServiceWorker] Install");
    e.waitUntil(caches.open(appShellCache).then(function (cache) {
        console.log("[ServiceWorker] Caching App Shell");
        return cache.addAll(filesToCache)
            .then(function () { handle404Redirects(cache); });
    }));
});
// When the currently open pages of your site are closed, the old service worker will be killed 
// and the new service worker will take control and fires "activate"
self.addEventListener("activate", function (e) {
    console.log("[ServiceWorker] Activate");
    e.waitUntil(caches.keys().then(function (keyList) {
        return Promise.all(keyList.map(function (key) {
            if (key !== appShellCache) {
                console.log("[ServiceWorker] Removing old cache", key);
                return caches.delete(key);
            }
        }));
    }));
});
self.addEventListener("fetch", function (e) {
    console.log("[ServiceWorker] Fetch", e.request.url);
    var dataUrl = "[insert data url here]";
    // we cache the data received from the data api so that we can display the data really fast before receiving the data
    if (e.request.url.indexOf(dataUrl) === 0) {
        e.respondWith(fetch(e.request)
            .then(function (response) {
            return caches.open(dataCache).then(function (cache) {
                cache.put(e.request, response.clone());
                console.log("[ServiceWorker] Fetched&Cached Data");
                return response;
            });
        }));
    }
    else {
        // return the cached app shell
        e.respondWith(caches.match(e.request).then(function (response) {
            return response || fetch(e.request);
        }));
    }
});
function handle404Redirects(cache) {
    return fetch(custom404)
        .then(function (response) {
        routesToRedirects.forEach(function (route) {
            var r = response.clone();
            return cache.put(route, r);
        });
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9zZXJ2aWNlLXdvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBRyxlQUFlLENBQUM7QUFDaEMsSUFBSSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFFdEMsSUFBTSxTQUFTLEdBQUcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0MsSUFBTSxpQkFBaUIsR0FBRyxFQUV6QixDQUFDO0FBQ0YsSUFBSSxZQUFZLEdBQWM7SUFDNUIsU0FBUztJQUNULElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNoQixJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDMUIsSUFBSSxPQUFPLENBQUMsMEJBQTBCLENBQUM7SUFDdkMsSUFBSSxPQUFPLENBQUMsMkJBQTJCLENBQUM7SUFDeEMsSUFBSSxPQUFPLENBQUMsc0JBQXNCLENBQUM7SUFDbkMsSUFBSSxPQUFPLENBQUMsb0NBQW9DLENBQUM7SUFDakQsSUFBSSxPQUFPLENBQUMsOEJBQThCLENBQUM7SUFDM0MsSUFBSSxPQUFPLENBQUMscUNBQXFDLENBQUM7SUFDbEQsSUFBSSxPQUFPLENBQUMscUNBQXFDLENBQUM7SUFDbEQsSUFBSSxPQUFPLENBQUMscUJBQXFCLENBQUM7Q0FDbkMsQ0FBQztBQUVGLDREQUE0RDtBQUM1RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBa0I7SUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBRXZDLENBQUMsQ0FBQyxTQUFTLENBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7YUFDOUIsSUFBSSxDQUFDLGNBQVEsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxnR0FBZ0c7QUFDaEcsb0VBQW9FO0FBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFrQjtJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsT0FBTztRQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRztZQUMxQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQztnQkFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBYTtJQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEQsSUFBSSxPQUFPLEdBQUcsd0JBQXdCLENBQUM7SUFDdkMscUhBQXFIO0lBQ3JILEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxXQUFXLENBQ1gsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7YUFDYixJQUFJLENBQUMsVUFBVSxRQUFRO1lBQ3RCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUs7Z0JBQ2hELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO2dCQUNuRCxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLDhCQUE4QjtRQUM5QixDQUFDLENBQUMsV0FBVyxDQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLFFBQVE7WUFDN0MsTUFBTSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSCw0QkFBNEIsS0FBSztJQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztTQUNwQixJQUFJLENBQUMsVUFBQSxRQUFRO1FBQ1osaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUM3QixJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDekIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwiZmlsZSI6ImNsaWVudC9zZXJ2aWNlLXdvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBkYXRhQ2FjaGUgPSBcImRhdGFDYWNoZS0xICBcIjtcclxubGV0IGFwcFNoZWxsQ2FjaGUgPSBcImFwcFNoZWxsQ2FjaGUtMlwiO1xyXG5cclxuY29uc3QgY3VzdG9tNDA0ID0gbmV3IFJlcXVlc3QoXCIvNDA0Lmh0bWxcIik7XHJcbmNvbnN0IHJvdXRlc1RvUmVkaXJlY3RzID0gW1xyXG4gIC8vIG5ldyBSZXF1ZXN0KFwiL2hvbWVcIiksXHJcbl07XHJcbmxldCBmaWxlc1RvQ2FjaGU6IFJlcXVlc3RbXSA9IFtcclxuICBjdXN0b200MDQsXHJcbiAgbmV3IFJlcXVlc3QoXCIvXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL2FwcC5taW4uanNcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvYXBwL2FwcC5jb21wb25lbnQuaHRtbCBcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvYXBwL2hvbWUuY29tcG9uZW50Lmh0bWwgXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL2Fzc2V0cy9jc3MvbWFpbi5jc3NcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvdmVuZG9yL2NvcmUtanMvY2xpZW50L3NoaW0ubWluLmpzXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL3ZlbmRvci96b25lLmpzL2Rpc3Qvem9uZS5qc1wiKSxcclxuICBuZXcgUmVxdWVzdChcIi92ZW5kb3IvcmVmbGVjdC1tZXRhZGF0YS9SZWZsZWN0LmpzXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL3ZlbmRvci9zeXN0ZW1qcy9kaXN0L3N5c3RlbS5zcmMuanNcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvc3lzdGVtanMuY29uZmlnLmpzXCIpLFxyXG5dO1xyXG5cclxuLy8gSWYgYSBieXRlIGNoYW5nZXMgLT4gbmV3IHNlcnZpY2Ugd29ya2VyIHdpbGwgYmUgaW5zdGFsbGVkXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImluc3RhbGxcIiwgZnVuY3Rpb24gKGU6IEV4dGVuZGFibGVFdmVudCkge1xyXG4gIGNvbnNvbGUubG9nKFwiW1NlcnZpY2VXb3JrZXJdIEluc3RhbGxcIik7XHJcblxyXG4gIGUud2FpdFVudGlsKFxyXG4gICAgY2FjaGVzLm9wZW4oYXBwU2hlbGxDYWNoZSkudGhlbihmdW5jdGlvbiAoY2FjaGUpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gQ2FjaGluZyBBcHAgU2hlbGxcIik7XHJcbiAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoZmlsZXNUb0NhY2hlKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHsgaGFuZGxlNDA0UmVkaXJlY3RzKGNhY2hlKTsgfSk7XHJcbiAgICB9KVxyXG4gICk7XHJcbn0pO1xyXG5cclxuLy8gV2hlbiB0aGUgY3VycmVudGx5IG9wZW4gcGFnZXMgb2YgeW91ciBzaXRlIGFyZSBjbG9zZWQsIHRoZSBvbGQgc2VydmljZSB3b3JrZXIgd2lsbCBiZSBraWxsZWQgXHJcbi8vIGFuZCB0aGUgbmV3IHNlcnZpY2Ugd29ya2VyIHdpbGwgdGFrZSBjb250cm9sIGFuZCBmaXJlcyBcImFjdGl2YXRlXCJcclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiYWN0aXZhdGVcIiwgZnVuY3Rpb24gKGU6IEV4dGVuZGFibGVFdmVudCkge1xyXG4gIGNvbnNvbGUubG9nKFwiW1NlcnZpY2VXb3JrZXJdIEFjdGl2YXRlXCIpO1xyXG4gIGUud2FpdFVudGlsKFxyXG4gICAgY2FjaGVzLmtleXMoKS50aGVuKGZ1bmN0aW9uIChrZXlMaXN0KSB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChrZXlMaXN0Lm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgaWYgKGtleSAhPT0gYXBwU2hlbGxDYWNoZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gUmVtb3Zpbmcgb2xkIGNhY2hlXCIsIGtleSk7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGVzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSkpO1xyXG4gICAgfSlcclxuICApO1xyXG59KTtcclxuXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImZldGNoXCIsIGZ1bmN0aW9uIChlOiBGZXRjaEV2ZW50KSB7XHJcbiAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gRmV0Y2hcIiwgZS5yZXF1ZXN0LnVybCk7XHJcbiAgbGV0IGRhdGFVcmwgPSBcIltpbnNlcnQgZGF0YSB1cmwgaGVyZV1cIjtcclxuICAvLyB3ZSBjYWNoZSB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIHRoZSBkYXRhIGFwaSBzbyB0aGF0IHdlIGNhbiBkaXNwbGF5IHRoZSBkYXRhIHJlYWxseSBmYXN0IGJlZm9yZSByZWNlaXZpbmcgdGhlIGRhdGFcclxuICBpZiAoZS5yZXF1ZXN0LnVybC5pbmRleE9mKGRhdGFVcmwpID09PSAwKSB7XHJcbiAgICBlLnJlc3BvbmRXaXRoKFxyXG4gICAgICBmZXRjaChlLnJlcXVlc3QpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGVzLm9wZW4oZGF0YUNhY2hlKS50aGVuKGZ1bmN0aW9uIChjYWNoZSkge1xyXG4gICAgICAgICAgICBjYWNoZS5wdXQoZS5yZXF1ZXN0LCByZXNwb25zZS5jbG9uZSgpKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gRmV0Y2hlZCZDYWNoZWQgRGF0YVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHJldHVybiB0aGUgY2FjaGVkIGFwcCBzaGVsbFxyXG4gICAgZS5yZXNwb25kV2l0aChcclxuICAgICAgY2FjaGVzLm1hdGNoKGUucmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgZmV0Y2goZS5yZXF1ZXN0KTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZTQwNFJlZGlyZWN0cyhjYWNoZSkge1xyXG4gIHJldHVybiBmZXRjaChjdXN0b200MDQpXHJcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgIHJvdXRlc1RvUmVkaXJlY3RzLmZvckVhY2gocm91dGUgPT4ge1xyXG4gICAgICAgIGxldCByID0gcmVzcG9uc2UuY2xvbmUoKTtcclxuICAgICAgICByZXR1cm4gY2FjaGUucHV0KHJvdXRlLCByKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
