var baseApiUrl = "https://mawewebapi.azurewebsites.net/api"; // https://mawewebapi.azurewebsites.net/api", "http://localhost:22603/api"
var version = 13;
var dataCache = "dataCache-1";
var appShellCache = "appShellCache-" + version;
var custom404 = new Request("/404.html");
var routesToRedirects = [
    // Use this configuration instead of the cached "home". It's needed for the github SPA pages hack
    new Request("/home"),
    new Request("/camera"),
    new Request("/pushNotification"),
];
var filesToCache = [
    // new Request("/home"),
    // new Request("/camera"),
    // new Request("/pushNotification"),
    new Request("/main.js"),
    // App
    new Request("/"),
    new Request("/app.min.js"),
    new Request("/app/app.component.html "),
    new Request("/app/home.component.html "),
    new Request("/app/message.component.html "),
    new Request("/app/push-notification.component.html "),
    new Request("/app/camera.component.html "),
    new Request("/app/snackbar.component.html"),
    new Request("/app/snackbar.component.css"),
    new Request("/assets/css/main.css"),
    new Request("/assets/images/surfer-48.png"),
    new Request("/assets/images/surfer-1.jpg"),
    new Request("/manifest.json"),
    new Request("/systemjs.config.js"),
    // Vendor
    new Request("/vendor/core-js/client/shim.min.js"),
    new Request("/vendor/zone.js/dist/zone.js"),
    new Request("/vendor/reflect-metadata/Reflect.js"),
    new Request("/vendor/systemjs/dist/system.src.js"),
    // External
    new Request("https://fonts.googleapis.com/icon?family=Material+Icons"),
    new Request("https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.0/css/materialize.min.css"),
    new Request("https://code.jquery.com/jquery-3.1.0.min.js"),
    new Request("https://cdnjs.cloudflare.com/ajax/libs/materialize/0.98.0/js/materialize.min.js"),
];
// If a byte changes -> new service worker will be installed
self.addEventListener("install", function (e) {
    console.log("[ServiceWorker] Install");
    e.waitUntil(caches.open(appShellCache).then(function (cache) {
        console.log("[ServiceWorker] Caching App Shell");
        return cache.addAll(filesToCache)
            .then(function () { handle404Redirects(cache); });
    }).then(function () {
        console.log("[ServiceWorker] Skip waiting on install");
        return skipWaiting();
    }));
});
// When the currently open pages of your site are closed, the old service worker will be killed 
// and the new service worker will take control and fires "activate"
self.addEventListener("activate", function (e) {
    console.log("[ServiceWorker] Activate");
    e.waitUntil(caches.keys().then(function (keyList) {
        return Promise.all(keyList.map(function (key) {
            if (key !== appShellCache) {
                console.log("[ServiceWorker] Removing old cache", key);
                return caches.delete(key);
            }
        })).then(function () {
            console.log("[ServiceWorker] Claiming clients for version ", version);
            return clients.claim();
        });
    }));
});
self.addEventListener("fetch", function (e) {
    var dataUrl = baseApiUrl + "/messages";
    // we cache the data received from the data api so that we can display the data really fast before receiving the data
    if (e.request.url.indexOf(dataUrl) > -1) {
        // CORS-Shit: when offline the fetch fails hard because of cors! As a workaround I just return the cached data when offline.
        if (navigator.onLine) {
            e.respondWith(fetch(e.request)
                .then(function (response) {
                return caches.open(dataCache).then(function (cache) {
                    cache.put(e.request, response.clone());
                    console.log("[ServiceWorker] Fetched&Cached Data");
                    return response;
                });
            }));
        }
        else {
            e.respondWith(caches.match(e.request).then(function (response) {
                return response;
            }));
        }
    }
    else {
        // return the cached app shell
        e.respondWith(caches.match(e.request).then(function (response) {
            return response || fetch(e.request);
        }));
    }
});
self.addEventListener("push", function (e) {
    console.log("[ServiceWorker] Push message received ", e);
    e.waitUntil(fetch(baseApiUrl + "/notification/message")
        .then(function (response) { return response.json(); })
        .then(function (notification) {
        var notificationTitle = notification.title || "Notification";
        var notificationMessage = notification.message || "Click Me!";
        registration.showNotification(notificationTitle, {
            body: notificationMessage,
            icon: "assets/images/surfer-48.png",
            tag: "message-tag",
            vibrate: [200, 100, 200, 100, 200, 100, 400],
            actions: [
                { "action": "yes", "title": "Yes", "icon": "images/yes.png" },
                { "action": "no", "title": "No", "icon": "images/no.png" },
            ],
        });
    }));
});
self.addEventListener("notificationclick", function (event) {
    console.log("[ServiceWorker] Notification click: tag ", event.notification.tag);
    event.notification.close();
    var url = "https://toeggel.github.io";
    event.waitUntil(clients.matchAll({
        type: "window",
    })
        .then(function (windowClients) {
        for (var i = 0; i < windowClients.length; i++) {
            var client = windowClients[i];
            console.log("[ServiceWorker] Client URL:", client.url);
            if (client.url === url && "focus" in client) {
                return client.focus();
            }
        }
        if (clients.openWindow) {
            return clients.openWindow(url);
        }
    }));
});
function handle404Redirects(cache) {
    return fetch(custom404)
        .then(function (response) {
        routesToRedirects.forEach(function (route) {
            var r = response.clone();
            return cache.put(route, r);
        });
    });
}

//# sourceMappingURL=data:application/json;base64,
