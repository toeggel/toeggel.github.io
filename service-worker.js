var version = 5;
var dataCache = "dataCache-1";
var appShellCache = "appShellCache-" + version;
var custom404 = new Request("/404.html");
var routesToRedirects = [new Request("/home"),];
var filesToCache = [
    new Request("/"),
    new Request("/app.min.js"),
    new Request("/app/app.component.html "),
    new Request("/app/home.component.html "),
    new Request("/assets/css/main.css"),
    new Request("/assets/images/surfer-48.png"),
    new Request("/manifest.json"),
    new Request("/systemjs.config.js"),
    new Request("/vendor/core-js/client/shim.min.js"),
    new Request("/vendor/zone.js/dist/zone.js"),
    new Request("/vendor/reflect-metadata/Reflect.js"),
    new Request("/vendor/systemjs/dist/system.src.js"),
    new Request("https://fonts.googleapis.com/icon?family=Material+Icons"),
    new Request("https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/css/materialize.min.css"),
    new Request("https://code.jquery.com/jquery-3.1.0.min.js"),
    new Request("https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/js/materialize.min.js"),
];
// If a byte changes -> new service worker will be installed
self.addEventListener("install", function (e) {
    console.log("[ServiceWorker] Install");
    e.waitUntil(caches.open(appShellCache).then(function (cache) {
        console.log("[ServiceWorker] Caching App Shell");
        return cache.addAll(filesToCache)
            .then(function () { handle404Redirects(cache); });
    }).then(function () {
        console.log("[ServiceWorker] Skip waiting on install");
        return skipWaiting();
    }));
});
// When the currently open pages of your site are closed, the old service worker will be killed 
// and the new service worker will take control and fires "activate"
self.addEventListener("activate", function (e) {
    console.log("[ServiceWorker] Activate");
    e.waitUntil(caches.keys().then(function (keyList) {
        return Promise.all(keyList.map(function (key) {
            if (key !== appShellCache) {
                console.log("[ServiceWorker] Removing old cache", key);
                return caches.delete(key);
            }
        })).then(function () {
            console.log("[ServiceWorker] Claiming clients for version ", version);
            return clients.claim();
        });
    }));
});
self.addEventListener("fetch", function (e) {
    var dataUrl = "[insert data url here]";
    // we cache the data received from the data api so that we can display the data really fast before receiving the data
    if (e.request.url.indexOf(dataUrl) === 0) {
        e.respondWith(fetch(e.request)
            .then(function (response) {
            return caches.open(dataCache).then(function (cache) {
                cache.put(e.request, response.clone());
                console.log("[ServiceWorker] Fetched&Cached Data");
                return response;
            });
        }));
    }
    else {
        // return the cached app shell
        e.respondWith(caches.match(e.request).then(function (response) {
            return response || fetch(e.request);
        }));
    }
});
self.addEventListener("push", function (e) {
    console.log("[ServiceWorker] Push message received ", e);
    // instead of having a fixed message we could get the content from an api here
    var title = "Push message";
    e.waitUntil(registration.showNotification(title, {
        body: "Some Text",
        icon: "assets/images/surfer-48.png",
        tag: "message-tag",
    }));
});
self.addEventListener("notificationclick", function (event) {
    console.log("[ServiceWorker] Notification click: tag ", event.notification.tag);
    event.notification.close();
    var url = "https://toeggel.github.io/home";
    event.waitUntil(clients.matchAll({
        type: "window",
    })
        .then(function (windowClients) {
        for (var i = 0; i < windowClients.length; i++) {
            var client = windowClients[i];
            console.log("[ServiceWorker] Client URL:", client.url);
            if (client.url === url && "focus" in client) {
                return client.focus();
            }
        }
        if (clients.openWindow) {
            return clients.openWindow(url);
        }
    }));
});
function handle404Redirects(cache) {
    return fetch(custom404)
        .then(function (response) {
        routesToRedirects.forEach(function (route) {
            var r = response.clone();
            return cache.put(route, r);
        });
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9zZXJ2aWNlLXdvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDaEIsSUFBSSxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQzlCLElBQUksYUFBYSxHQUFHLG1CQUFpQixPQUFTLENBQUM7QUFFL0MsSUFBTSxTQUFTLEdBQUcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0MsSUFBTSxpQkFBaUIsR0FBRyxFQUV6QixDQUFDO0FBQ0YsSUFBSSxZQUFZLEdBQWM7SUFDNUIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDO0lBRXBCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNoQixJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDMUIsSUFBSSxPQUFPLENBQUMsMEJBQTBCLENBQUM7SUFDdkMsSUFBSSxPQUFPLENBQUMsMkJBQTJCLENBQUM7SUFDeEMsSUFBSSxPQUFPLENBQUMsc0JBQXNCLENBQUM7SUFDbkMsSUFBSSxPQUFPLENBQUMsOEJBQThCLENBQUM7SUFDM0MsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7SUFDN0IsSUFBSSxPQUFPLENBQUMscUJBQXFCLENBQUM7SUFDbEMsSUFBSSxPQUFPLENBQUMsb0NBQW9DLENBQUM7SUFDakQsSUFBSSxPQUFPLENBQUMsOEJBQThCLENBQUM7SUFDM0MsSUFBSSxPQUFPLENBQUMscUNBQXFDLENBQUM7SUFDbEQsSUFBSSxPQUFPLENBQUMscUNBQXFDLENBQUM7SUFDbEQsSUFBSSxPQUFPLENBQUMseURBQXlELENBQUM7SUFDdEUsSUFBSSxPQUFPLENBQUMsbUZBQW1GLENBQUM7SUFDaEcsSUFBSSxPQUFPLENBQUMsNkNBQTZDLENBQUM7SUFDMUQsSUFBSSxPQUFPLENBQUMsaUZBQWlGLENBQUM7Q0FDL0YsQ0FBQztBQUVGLDREQUE0RDtBQUM1RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQUMs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QUFPLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN4QixDQUFDO1FBQ0gsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCw0QkFBNEIsS0FBSztJQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztTQUNwQixJQUFJLENBQUMsVUFBQSxRQUFRO1FBQ1osaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUM3QixJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDekIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwiZmlsZSI6ImNsaWVudC9zZXJ2aWNlLXdvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCB2ZXJzaW9uID0gNTtcclxubGV0IGRhdGFDYWNoZSA9IFwiZGF0YUNhY2hlLTFcIjtcclxubGV0IGFwcFNoZWxsQ2FjaGUgPSBgYXBwU2hlbGxDYWNoZS0ke3ZlcnNpb259YDtcclxuXHJcbmNvbnN0IGN1c3RvbTQwNCA9IG5ldyBSZXF1ZXN0KFwiLzQwNC5odG1sXCIpO1xyXG5jb25zdCByb3V0ZXNUb1JlZGlyZWN0cyA9IFtcclxuICAvLyBuZXcgUmVxdWVzdChcIi9ob21lXCIpLFxyXG5dO1xyXG5sZXQgZmlsZXNUb0NhY2hlOiBSZXF1ZXN0W10gPSBbXHJcbiAgbmV3IFJlcXVlc3QoXCIvaG9tZVwiKSxcclxuXHJcbiAgbmV3IFJlcXVlc3QoXCIvXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL2FwcC5taW4uanNcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvYXBwL2FwcC5jb21wb25lbnQuaHRtbCBcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvYXBwL2hvbWUuY29tcG9uZW50Lmh0bWwgXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL2Fzc2V0cy9jc3MvbWFpbi5jc3NcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvYXNzZXRzL2ltYWdlcy9zdXJmZXItNDgucG5nXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL21hbmlmZXN0Lmpzb25cIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvc3lzdGVtanMuY29uZmlnLmpzXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiL3ZlbmRvci9jb3JlLWpzL2NsaWVudC9zaGltLm1pbi5qc1wiKSxcclxuICBuZXcgUmVxdWVzdChcIi92ZW5kb3Ivem9uZS5qcy9kaXN0L3pvbmUuanNcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCIvdmVuZG9yL3JlZmxlY3QtbWV0YWRhdGEvUmVmbGVjdC5qc1wiKSxcclxuICBuZXcgUmVxdWVzdChcIi92ZW5kb3Ivc3lzdGVtanMvZGlzdC9zeXN0ZW0uc3JjLmpzXCIpLFxyXG4gIG5ldyBSZXF1ZXN0KFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9pY29uP2ZhbWlseT1NYXRlcmlhbCtJY29uc1wiKSxcclxuICBuZXcgUmVxdWVzdChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL21hdGVyaWFsaXplLzAuOTcuNy9jc3MvbWF0ZXJpYWxpemUubWluLmNzc1wiKSxcclxuICBuZXcgUmVxdWVzdChcImh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjEuMC5taW4uanNcIiksXHJcbiAgbmV3IFJlcXVlc3QoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tYXRlcmlhbGl6ZS8wLjk3LjcvanMvbWF0ZXJpYWxpemUubWluLmpzXCIpLFxyXG5dO1xyXG5cclxuLy8gSWYgYSBieXRlIGNoYW5nZXMgLT4gbmV3IHNlcnZpY2Ugd29ya2VyIHdpbGwgYmUgaW5zdGFsbGVkXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImluc3RhbGxcIiwgKGU6IEV4dGVuZGFibGVFdmVudCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFwiW1NlcnZpY2VXb3JrZXJdIEluc3RhbGxcIik7XHJcblxyXG4gIGUud2FpdFVudGlsKFxyXG4gICAgY2FjaGVzLm9wZW4oYXBwU2hlbGxDYWNoZSkudGhlbihmdW5jdGlvbiAoY2FjaGUpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gQ2FjaGluZyBBcHAgU2hlbGxcIik7XHJcbiAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoZmlsZXNUb0NhY2hlKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHsgaGFuZGxlNDA0UmVkaXJlY3RzKGNhY2hlKTsgfSk7XHJcbiAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gU2tpcCB3YWl0aW5nIG9uIGluc3RhbGxcIik7XHJcbiAgICAgIHJldHVybiBza2lwV2FpdGluZygpO1xyXG4gICAgfSlcclxuICApO1xyXG59KTtcclxuXHJcbi8vIFdoZW4gdGhlIGN1cnJlbnRseSBvcGVuIHBhZ2VzIG9mIHlvdXIgc2l0ZSBhcmUgY2xvc2VkLCB0aGUgb2xkIHNlcnZpY2Ugd29ya2VyIHdpbGwgYmUga2lsbGVkIFxyXG4vLyBhbmQgdGhlIG5ldyBzZXJ2aWNlIHdvcmtlciB3aWxsIHRha2UgY29udHJvbCBhbmQgZmlyZXMgXCJhY3RpdmF0ZVwiXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImFjdGl2YXRlXCIsIChlOiBFeHRlbmRhYmxlRXZlbnQpID0+IHtcclxuICBjb25zb2xlLmxvZyhcIltTZXJ2aWNlV29ya2VyXSBBY3RpdmF0ZVwiKTtcclxuICBlLndhaXRVbnRpbChcclxuICAgIGNhY2hlcy5rZXlzKCkudGhlbigoa2V5TGlzdCkgPT4ge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoa2V5TGlzdC5tYXAoKGtleSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgIT09IGFwcFNoZWxsQ2FjaGUpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1NlcnZpY2VXb3JrZXJdIFJlbW92aW5nIG9sZCBjYWNoZVwiLCBrZXkpO1xyXG4gICAgICAgICAgcmV0dXJuIGNhY2hlcy5kZWxldGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pKS50aGVuKCgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIltTZXJ2aWNlV29ya2VyXSBDbGFpbWluZyBjbGllbnRzIGZvciB2ZXJzaW9uIFwiLCB2ZXJzaW9uKTtcclxuICAgICAgICByZXR1cm4gY2xpZW50cy5jbGFpbSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgKTtcclxufSk7XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJmZXRjaFwiLCAoZTogRmV0Y2hFdmVudCkgPT4ge1xyXG4gIGxldCBkYXRhVXJsID0gXCJbaW5zZXJ0IGRhdGEgdXJsIGhlcmVdXCI7XHJcbiAgLy8gd2UgY2FjaGUgdGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgZGF0YSBhcGkgc28gdGhhdCB3ZSBjYW4gZGlzcGxheSB0aGUgZGF0YSByZWFsbHkgZmFzdCBiZWZvcmUgcmVjZWl2aW5nIHRoZSBkYXRhXHJcbiAgaWYgKGUucmVxdWVzdC51cmwuaW5kZXhPZihkYXRhVXJsKSA9PT0gMCkge1xyXG4gICAgZS5yZXNwb25kV2l0aChcclxuICAgICAgZmV0Y2goZS5yZXF1ZXN0KVxyXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGNhY2hlcy5vcGVuKGRhdGFDYWNoZSkudGhlbigoY2FjaGUpID0+IHtcclxuICAgICAgICAgICAgY2FjaGUucHV0KGUucmVxdWVzdCwgcmVzcG9uc2UuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1NlcnZpY2VXb3JrZXJdIEZldGNoZWQmQ2FjaGVkIERhdGFcIik7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyByZXR1cm4gdGhlIGNhY2hlZCBhcHAgc2hlbGxcclxuICAgIGUucmVzcG9uZFdpdGgoXHJcbiAgICAgIGNhY2hlcy5tYXRjaChlLnJlcXVlc3QpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGZldGNoKGUucmVxdWVzdCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufSk7XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJwdXNoXCIsIChlOiBQdXNoRXZlbnQpID0+IHtcclxuICBjb25zb2xlLmxvZyhcIltTZXJ2aWNlV29ya2VyXSBQdXNoIG1lc3NhZ2UgcmVjZWl2ZWQgXCIsIGUpO1xyXG4gIC8vIGluc3RlYWQgb2YgaGF2aW5nIGEgZml4ZWQgbWVzc2FnZSB3ZSBjb3VsZCBnZXQgdGhlIGNvbnRlbnQgZnJvbSBhbiBhcGkgaGVyZVxyXG4gIGxldCB0aXRsZSA9IFwiUHVzaCBtZXNzYWdlXCI7XHJcbiAgZS53YWl0VW50aWwoXHJcbiAgICByZWdpc3RyYXRpb24uc2hvd05vdGlmaWNhdGlvbih0aXRsZSwge1xyXG4gICAgICBib2R5OiBcIlNvbWUgVGV4dFwiLFxyXG4gICAgICBpY29uOiBcImFzc2V0cy9pbWFnZXMvc3VyZmVyLTQ4LnBuZ1wiLFxyXG4gICAgICB0YWc6IFwibWVzc2FnZS10YWdcIixcclxuICAgIH0pKTtcclxufSk7XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJub3RpZmljYXRpb25jbGlja1wiLCAoZXZlbnQ6IE5vdGlmaWNhdGlvbkV2ZW50KSA9PiB7XHJcbiAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gTm90aWZpY2F0aW9uIGNsaWNrOiB0YWcgXCIsIGV2ZW50Lm5vdGlmaWNhdGlvbi50YWcpO1xyXG4gIGV2ZW50Lm5vdGlmaWNhdGlvbi5jbG9zZSgpO1xyXG4gIGxldCB1cmwgPSBcImh0dHBzOi8vdG9lZ2dlbC5naXRodWIuaW8vaG9tZVwiO1xyXG4gIGV2ZW50LndhaXRVbnRpbChcclxuICAgIGNsaWVudHMubWF0Y2hBbGwoe1xyXG4gICAgICB0eXBlOiBcIndpbmRvd1wiLFxyXG4gICAgfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHdpbmRvd0NsaWVudHMpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpbmRvd0NsaWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGxldCBjbGllbnQgPSB3aW5kb3dDbGllbnRzW2ldO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJbU2VydmljZVdvcmtlcl0gQ2xpZW50IFVSTDpcIiwgY2xpZW50LnVybCk7XHJcbiAgICAgICAgICBpZiAoY2xpZW50LnVybCA9PT0gdXJsICYmIFwiZm9jdXNcIiBpbiBjbGllbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xpZW50cy5vcGVuV2luZG93KSB7XHJcbiAgICAgICAgICByZXR1cm4gY2xpZW50cy5vcGVuV2luZG93KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlNDA0UmVkaXJlY3RzKGNhY2hlKSB7XHJcbiAgcmV0dXJuIGZldGNoKGN1c3RvbTQwNClcclxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgcm91dGVzVG9SZWRpcmVjdHMuZm9yRWFjaChyb3V0ZSA9PiB7XHJcbiAgICAgICAgbGV0IHIgPSByZXNwb25zZS5jbG9uZSgpO1xyXG4gICAgICAgIHJldHVybiBjYWNoZS5wdXQocm91dGUsIHIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
